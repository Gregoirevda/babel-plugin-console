// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`console Arrow Function > const > scope of: custom message, function signature, params, variable, return value and script: Arrow Function > const > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = (a, b) => {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = (a, b) => {
  const c = 10;
  console.log('Custom add function message');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:6) const add = (a, b) => {...}');
  } else {
    console.log('▼ ', '(1:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:13)', 'a:', a);
  } else {
    console.log('| | ', '(1:13)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:16)', 'b:', b);
  } else {
    console.log('| | ', '(1:16)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.log('(2:8)', 'c:', c);
  } else {
    console.log('| | ', '(2:8)', 'c:', c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(4:9)', a + b + c);
  } else {
    console.log('| | ', '(4:9)', a + b + c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6) const add = (a, b) => {...}');
  } else {
    console.log('| | ', '(1:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:6) const add = (a, b) => {...}');
  }

  return a + b + c;
};
"
`;

exports[`console Arrow Function > let > scope of: custom message, function signature, params, variable, return value and script: Arrow Function > let > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
let add = (a, b) => {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

let add = (a, b) => {
  const c = 10;
  console.log('Custom add function message');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:4) let add = (a, b) => {...}');
  } else {
    console.log('▼ ', '(1:4) let add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:11)', 'a:', a);
  } else {
    console.log('| | ', '(1:11)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:14)', 'b:', b);
  } else {
    console.log('| | ', '(1:14)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.log('(2:8)', 'c:', c);
  } else {
    console.log('| | ', '(2:8)', 'c:', c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(4:9)', a + b + c);
  } else {
    console.log('| | ', '(4:9)', a + b + c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:4) let add = (a, b) => {...}');
  } else {
    console.log('| | ', '(1:4) let add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:4) let add = (a, b) => {...}');
  }

  return a + b + c;
};
"
`;

exports[`console Async functions: Async functions 1`] = `
"
const getApi = async (url) => {
  console.scope('Requesting some data');
  return await fetch(url);
}

      ↓ ↓ ↓ ↓ ↓ ↓

const getApi = async url => {
  console.log('Requesting some data');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:6) const getApi = (url) => {...}');
  } else {
    console.log('▼ ', '(1:6) const getApi = (url) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:22)', 'url:', url);
  } else {
    console.log('| | ', '(1:22)', 'url:', url);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:9)', (await fetch(url)));
  } else {
    console.log('| | ', '(3:9)', (await fetch(url)));
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6) const getApi = (url) => {...}');
  } else {
    console.log('| | ', '(1:6) const getApi = (url) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:6) const getApi = (url) => {...}');
  }

  return await fetch(url);
};
"
`;

exports[`console Called outside of a function > remove console scope call: Called outside of a function > remove console scope call 1`] = `
"
const c = 10;
console.scope('should be removed');

      ↓ ↓ ↓ ↓ ↓ ↓

const c = 10;
"
`;

exports[`console Curried Arrow Function > scope of: custom message, function signature, params, variable, return value and script: Curried Arrow Function > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = (a) => (b) => {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = a => b => {
  const c = 10;
  console.log('Custom add function message');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:0) const add = (a) => (b) => {...}');
  } else {
    console.log('▼ ', '(1:0) const add = (a) => (b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:13)', 'a:', a);
  } else {
    console.log('| | ', '(1:13)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:20)', 'b:', b);
  } else {
    console.log('| | ', '(1:20)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.log('(2:8)', 'c:', c);
  } else {
    console.log('| | ', '(2:8)', 'c:', c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(4:9)', a + b + c);
  } else {
    console.log('| | ', '(4:9)', a + b + c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6) const add = (a) => {...}');
  } else {
    console.log('| | ', '(1:6) const add = (a) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:0) const add = (a) => (b) => {...}');
  }

  return a + b + c;
};
"
`;

exports[`console Curried Function Declarion > scope of: custom message, function signature, params, variable, return value and script: Curried Function Declarion > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
function add(a) {
  return (b) => {
    const c = 10;
    console.scope('Custom add function message');
    return a + b + c;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

function add(a) {
  return b => {
    const c = 10;
    console.log('Custom add function message');

    if (typeof window !== 'undefined') {
      console.groupCollapsed('(1:0) const add = (a) => (b) => {...}');
    } else {
      console.log('▼ ', '(1:0) const add = (a) => (b) => {...}');
    }

    if (typeof window !== 'undefined') {
      console.groupCollapsed('Parameters');
    } else {
      console.log('| ▼ ', 'Parameters');
    }

    if (typeof window !== 'undefined') {
      console.log('(1:13)', 'a:', a);
    } else {
      console.log('| | ', '(1:13)', 'a:', a);
    }

    if (typeof window !== 'undefined') {
      console.log('(2:10)', 'b:', b);
    } else {
      console.log('| | ', '(2:10)', 'b:', b);
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('Parameters');
    }

    if (typeof window !== 'undefined') {
      console.groupCollapsed('Variables');
    } else {
      console.log('| ▼ ', 'Variables');
    }

    if (typeof window !== 'undefined') {
      console.log('(3:10)', 'c:', c);
    } else {
      console.log('| | ', '(3:10)', 'c:', c);
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('Variables');
    }

    if (typeof window !== 'undefined') {
      console.groupCollapsed('Return');
    } else {
      console.log('| ▼ ', 'Return');
    }

    if (typeof window !== 'undefined') {
      console.log('(5:11)', a + b + c);
    } else {
      console.log('| | ', '(5:11)', a + b + c);
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('Return');
    }

    if (typeof window !== 'undefined') {
      console.groupCollapsed('Script');
    } else {
      console.log('| ▼ ', 'Script');
    }

    if (typeof window !== 'undefined') {
      console.log('(1:9) function add(a) {...}');
    } else {
      console.log('| | ', '(1:9) function add(a) {...}');
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('Script');
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('(1:0) const add = (a) => (b) => {...}');
    }

    return a + b + c;
  };
}
"
`;

exports[`console Curried Function Expression > scope of: custom message, function signature, params, variable, return value and script: Curried Function Expression > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = function (a) {
  return function(b) {
    const c = 10;
    console.scope('Custom add function message');
    return a + b + c;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = function (a) {
  return function (b) {
    const c = 10;
    console.log('Custom add function message');

    if (typeof window !== 'undefined') {
      console.groupCollapsed('(1:0) const add = (a) => (b) => {...}');
    } else {
      console.log('▼ ', '(1:0) const add = (a) => (b) => {...}');
    }

    if (typeof window !== 'undefined') {
      console.groupCollapsed('Parameters');
    } else {
      console.log('| ▼ ', 'Parameters');
    }

    if (typeof window !== 'undefined') {
      console.log('(1:22)', 'a:', a);
    } else {
      console.log('| | ', '(1:22)', 'a:', a);
    }

    if (typeof window !== 'undefined') {
      console.log('(2:18)', 'b:', b);
    } else {
      console.log('| | ', '(2:18)', 'b:', b);
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('Parameters');
    }

    if (typeof window !== 'undefined') {
      console.groupCollapsed('Variables');
    } else {
      console.log('| ▼ ', 'Variables');
    }

    if (typeof window !== 'undefined') {
      console.log('(3:10)', 'c:', c);
    } else {
      console.log('| | ', '(3:10)', 'c:', c);
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('Variables');
    }

    if (typeof window !== 'undefined') {
      console.groupCollapsed('Return');
    } else {
      console.log('| ▼ ', 'Return');
    }

    if (typeof window !== 'undefined') {
      console.log('(5:11)', a + b + c);
    } else {
      console.log('| | ', '(5:11)', a + b + c);
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('Return');
    }

    if (typeof window !== 'undefined') {
      console.groupCollapsed('Script');
    } else {
      console.log('| ▼ ', 'Script');
    }

    if (typeof window !== 'undefined') {
      console.log('(1:6) const add = function(a) => {...}');
    } else {
      console.log('| | ', '(1:6) const add = function(a) => {...}');
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('Script');
    }

    if (typeof window !== 'undefined') {
      console.groupEnd('(1:0) const add = (a) => (b) => {...}');
    }

    return a + b + c;
  };
};
"
`;

exports[`console Curried functions > scope of: custom message, function signature, params, variable, return value and script: Curried functions > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = function (a) {
  return function(b) {
    return c => {
      const d = 10;
      console.scope('Custom add function message');
      return a + b + c + d;
    }
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = function (a) {
  return function (b) {
    return c => {
      const d = 10;
      console.log('Custom add function message');

      if (typeof window !== 'undefined') {
        console.groupCollapsed('(1:0) const add = (a) => (b) => (c) => {...}');
      } else {
        console.log('▼ ', '(1:0) const add = (a) => (b) => (c) => {...}');
      }

      if (typeof window !== 'undefined') {
        console.groupCollapsed('Parameters');
      } else {
        console.log('| ▼ ', 'Parameters');
      }

      if (typeof window !== 'undefined') {
        console.log('(1:22)', 'a:', a);
      } else {
        console.log('| | ', '(1:22)', 'a:', a);
      }

      if (typeof window !== 'undefined') {
        console.log('(2:18)', 'b:', b);
      } else {
        console.log('| | ', '(2:18)', 'b:', b);
      }

      if (typeof window !== 'undefined') {
        console.log('(3:11)', 'c:', c);
      } else {
        console.log('| | ', '(3:11)', 'c:', c);
      }

      if (typeof window !== 'undefined') {
        console.groupEnd('Parameters');
      }

      if (typeof window !== 'undefined') {
        console.groupCollapsed('Variables');
      } else {
        console.log('| ▼ ', 'Variables');
      }

      if (typeof window !== 'undefined') {
        console.log('(4:12)', 'd:', d);
      } else {
        console.log('| | ', '(4:12)', 'd:', d);
      }

      if (typeof window !== 'undefined') {
        console.groupEnd('Variables');
      }

      if (typeof window !== 'undefined') {
        console.groupCollapsed('Return');
      } else {
        console.log('| ▼ ', 'Return');
      }

      if (typeof window !== 'undefined') {
        console.log('(6:13)', a + b + c + d);
      } else {
        console.log('| | ', '(6:13)', a + b + c + d);
      }

      if (typeof window !== 'undefined') {
        console.groupEnd('Return');
      }

      if (typeof window !== 'undefined') {
        console.groupCollapsed('Script');
      } else {
        console.log('| ▼ ', 'Script');
      }

      if (typeof window !== 'undefined') {
        console.log('(1:6) const add = function(a) => {...}');
      } else {
        console.log('| | ', '(1:6) const add = function(a) => {...}');
      }

      if (typeof window !== 'undefined') {
        console.groupEnd('Script');
      }

      if (typeof window !== 'undefined') {
        console.groupEnd('(1:0) const add = (a) => (b) => (c) => {...}');
      }

      return a + b + c + d;
    };
  };
};
"
`;

exports[`console Export default Curried Function  > scope of: custom message, function signature, params, variable, return value and script: Export default Curried Function  > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
export default addOne => (state = 0, action) => {
  console.scope('Add one reducer');
  return addOne(state);
}

      ↓ ↓ ↓ ↓ ↓ ↓

export default (addOne => (state = 0, action) => {
  console.log('Add one reducer');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:0) export default = (addOne) => (state, action) => {...}');
  } else {
    console.log('▼ ', '(1:0) export default = (addOne) => (state, action) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:15)', 'addOne:', addOne);
  } else {
    console.log('| | ', '(1:15)', 'addOne:', addOne);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:26)', 'state:', state);
  } else {
    console.log('| | ', '(1:26)', 'state:', state);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:37)', 'action:', action);
  } else {
    console.log('| | ', '(1:37)', 'action:', action);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:9)', addOne(state));
  } else {
    console.log('| | ', '(3:9)', addOne(state));
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:0) export default = (addOne) => (state, action) => {...}');
  }

  return addOne(state);
});
"
`;

exports[`console Export default Function  > scope of: custom message, function signature, params, variable, return value and script: Export default Function  > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
export default function(state = 0, action) {
  console.scope('Add one reducer');
  return state + 1;
}

      ↓ ↓ ↓ ↓ ↓ ↓

export default function (state = 0, action) {
  console.log('Add one reducer');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:0) export default function (state, action) {...}');
  } else {
    console.log('▼ ', '(1:0) export default function (state, action) {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:24)', 'state:', state);
  } else {
    console.log('| | ', '(1:24)', 'state:', state);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:35)', 'action:', action);
  } else {
    console.log('| | ', '(1:35)', 'action:', action);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:9)', state + 1);
  } else {
    console.log('| | ', '(3:9)', state + 1);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:0) export default function (state, action) {...}');
  }

  return state + 1;
}
"
`;

exports[`console Finds script scope: Finds script scope 1`] = `
"
const hello = 'hello';
function divide(a, b) {
  return a / b;
}
function add(a, b) {
  console.scope('Custom add function message');
  return a + b;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const hello = 'hello';
function divide(a, b) {
  return a / b;
}
function add(a, b) {
  console.log('Custom add function message');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(5:0) function add(a, b) {...}');
  } else {
    console.log('▼ ', '(5:0) function add(a, b) {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(5:13)', 'a:', a);
  } else {
    console.log('| | ', '(5:13)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(5:16)', 'b:', b);
  } else {
    console.log('| | ', '(5:16)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(7:9)', a + b);
  } else {
    console.log('| | ', '(7:9)', a + b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6)', 'hello:', hello);
  } else {
    console.log('| | ', '(1:6)', 'hello:', hello);
  }

  if (typeof window !== 'undefined') {
    console.log('(2:9) function divide(a, b) {...}');
  } else {
    console.log('| | ', '(2:9) function divide(a, b) {...}');
  }

  if (typeof window !== 'undefined') {
    console.log('(5:9) function add(a, b) {...}');
  } else {
    console.log('| | ', '(5:9) function add(a, b) {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(5:0) function add(a, b) {...}');
  }

  return a + b;
}
"
`;

exports[`console Function Declaration > scope of: custom message, function signature, params, variable, return value and script: Function Declaration > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
function add(a, b) {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

function add(a, b) {
  const c = 10;
  console.log('Custom add function message');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:0) function add(a, b) {...}');
  } else {
    console.log('▼ ', '(1:0) function add(a, b) {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:13)', 'a:', a);
  } else {
    console.log('| | ', '(1:13)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:16)', 'b:', b);
  } else {
    console.log('| | ', '(1:16)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.log('(2:8)', 'c:', c);
  } else {
    console.log('| | ', '(2:8)', 'c:', c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(4:9)', a + b + c);
  } else {
    console.log('| | ', '(4:9)', a + b + c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:9) function add(a, b) {...}');
  } else {
    console.log('| | ', '(1:9) function add(a, b) {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:0) function add(a, b) {...}');
  }

  return a + b + c;
}
"
`;

exports[`console Function Expression > const > scope of: custom message, function signature, params, variable, return value and script: Function Expression > const > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = function(a, b) {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = function (a, b) {
  const c = 10;
  console.log('Custom add function message');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:6) const add = function(a, b) => {...}');
  } else {
    console.log('▼ ', '(1:6) const add = function(a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:21)', 'a:', a);
  } else {
    console.log('| | ', '(1:21)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:24)', 'b:', b);
  } else {
    console.log('| | ', '(1:24)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.log('(2:8)', 'c:', c);
  } else {
    console.log('| | ', '(2:8)', 'c:', c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(4:9)', a + b + c);
  } else {
    console.log('| | ', '(4:9)', a + b + c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6) const add = function(a, b) => {...}');
  } else {
    console.log('| | ', '(1:6) const add = function(a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:6) const add = function(a, b) => {...}');
  }

  return a + b + c;
};
"
`;

exports[`console Function Expression > let > scope of: custom message, function signature, params, variable, return value and script: Function Expression > let > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
let add = function(a, b) {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

let add = function (a, b) {
  const c = 10;
  console.log('Custom add function message');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:4) let add = function(a, b) => {...}');
  } else {
    console.log('▼ ', '(1:4) let add = function(a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:19)', 'a:', a);
  } else {
    console.log('| | ', '(1:19)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:22)', 'b:', b);
  } else {
    console.log('| | ', '(1:22)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.log('(2:8)', 'c:', c);
  } else {
    console.log('| | ', '(2:8)', 'c:', c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(4:9)', a + b + c);
  } else {
    console.log('| | ', '(4:9)', a + b + c);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:4) let add = function(a, b) => {...}');
  } else {
    console.log('| | ', '(1:4) let add = function(a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:4) let add = function(a, b) => {...}');
  }

  return a + b + c;
};
"
`;

exports[`console Multiple console scopes: Multiple console scopes 1`] = `
"
const sum = (...xs) => {
  console.scope('Sum args');
  return xs.reduce((acc, x) => acc + x, 0);
}

const add = (a, b) => {
  console.scope('Adding stuff up');
  return a + b;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const sum = (...xs) => {
  console.log('Sum args');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:6) const sum = (xs) => {...}');
  } else {
    console.log('▼ ', '(1:6) const sum = (xs) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:16)', 'xs:', xs);
  } else {
    console.log('| | ', '(1:16)', 'xs:', xs);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:9)', xs.reduce((acc, x) => acc + x, 0));
  } else {
    console.log('| | ', '(3:9)', xs.reduce((acc, x) => acc + x, 0));
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6) const sum = () => {...}');
  } else {
    console.log('| | ', '(1:6) const sum = () => {...}');
  }

  if (typeof window !== 'undefined') {
    console.log('(6:6) const add = (a, b) => {...}');
  } else {
    console.log('| | ', '(6:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:6) const sum = (xs) => {...}');
  }

  return xs.reduce((acc, x) => acc + x, 0);
};

const add = (a, b) => {
  console.log('Adding stuff up');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(6:6) const add = (a, b) => {...}');
  } else {
    console.log('▼ ', '(6:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(6:13)', 'a:', a);
  } else {
    console.log('| | ', '(6:13)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(6:16)', 'b:', b);
  } else {
    console.log('| | ', '(6:16)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(8:9)', a + b);
  } else {
    console.log('| | ', '(8:9)', a + b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6) const sum = () => {...}');
  } else {
    console.log('| | ', '(1:6) const sum = () => {...}');
  }

  if (typeof window !== 'undefined') {
    console.log('(6:6) const add = (a, b) => {...}');
  } else {
    console.log('| | ', '(6:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(6:6) const add = (a, b) => {...}');
  }

  return a + b;
};
"
`;

exports[`console Remove import statements from script scope: Remove import statements from script scope 1`] = `
"
import x from 'x';

const add = (a, b) => {
  console.scope('Adding stuff up');
  return a + b;
}

      ↓ ↓ ↓ ↓ ↓ ↓

import x from 'x';

const add = (a, b) => {
  console.log('Adding stuff up');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(3:6) const add = (a, b) => {...}');
  } else {
    console.log('▼ ', '(3:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:13)', 'a:', a);
  } else {
    console.log('| | ', '(3:13)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(3:16)', 'b:', b);
  } else {
    console.log('| | ', '(3:16)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(5:9)', a + b);
  } else {
    console.log('| | ', '(5:9)', a + b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:6) const add = (a, b) => {...}');
  } else {
    console.log('| | ', '(3:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(3:6) const add = (a, b) => {...}');
  }

  return a + b;
};
"
`;

exports[`console Remove require statements from script scope: Remove require statements from script scope 1`] = `
"
const x = require('x');

const add = (a, b) => {
  console.scope('Adding stuff up');
  return a + b;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const x = require('x');

const add = (a, b) => {
  console.log('Adding stuff up');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(3:6) const add = (a, b) => {...}');
  } else {
    console.log('▼ ', '(3:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:13)', 'a:', a);
  } else {
    console.log('| | ', '(3:13)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(3:16)', 'b:', b);
  } else {
    console.log('| | ', '(3:16)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(5:9)', a + b);
  } else {
    console.log('| | ', '(5:9)', a + b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:6) const add = (a, b) => {...}');
  } else {
    console.log('| | ', '(3:6) const add = (a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(3:6) const add = (a, b) => {...}');
  }

  return a + b;
};
"
`;

exports[`console Return statement should be void when no return found: Return statement should be void when no return found 1`] = `
"
const add = function (a, b) {
  console.scope('Custom add function message');
  a + b;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = function (a, b) {
  console.log('Custom add function message');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:6) const add = function(a, b) => {...}');
  } else {
    console.log('▼ ', '(1:6) const add = function(a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:22)', 'a:', a);
  } else {
    console.log('| | ', '(1:22)', 'a:', a);
  }

  if (typeof window !== 'undefined') {
    console.log('(1:25)', 'b:', b);
  } else {
    console.log('| | ', '(1:25)', 'b:', b);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('Void');
  } else {
    console.log('| | ', 'Void');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6) const add = function(a, b) => {...}');
  } else {
    console.log('| | ', '(1:6) const add = function(a, b) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:6) const add = function(a, b) => {...}');
  }

  a + b;
};
"
`;

exports[`console Spread arguments: Spread arguments 1`] = `
"
const sum = (...xs) => {
  console.scope('Sum args');
  return xs.reduce((acc, x) => acc + x, 0);
}

      ↓ ↓ ↓ ↓ ↓ ↓

const sum = (...xs) => {
  console.log('Sum args');

  if (typeof window !== 'undefined') {
    console.groupCollapsed('(1:6) const sum = (xs) => {...}');
  } else {
    console.log('▼ ', '(1:6) const sum = (xs) => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Parameters');
  } else {
    console.log('| ▼ ', 'Parameters');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:16)', 'xs:', xs);
  } else {
    console.log('| | ', '(1:16)', 'xs:', xs);
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Parameters');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Variables');
  } else {
    console.log('| ▼ ', 'Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Variables');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Return');
  } else {
    console.log('| ▼ ', 'Return');
  }

  if (typeof window !== 'undefined') {
    console.log('(3:9)', xs.reduce((acc, x) => acc + x, 0));
  } else {
    console.log('| | ', '(3:9)', xs.reduce((acc, x) => acc + x, 0));
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Return');
  }

  if (typeof window !== 'undefined') {
    console.groupCollapsed('Script');
  } else {
    console.log('| ▼ ', 'Script');
  }

  if (typeof window !== 'undefined') {
    console.log('(1:6) const sum = () => {...}');
  } else {
    console.log('| | ', '(1:6) const sum = () => {...}');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('Script');
  }

  if (typeof window !== 'undefined') {
    console.groupEnd('(1:6) const sum = (xs) => {...}');
  }

  return xs.reduce((acc, x) => acc + x, 0);
};
"
`;
