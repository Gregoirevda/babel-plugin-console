// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`1. Called outside of a function > remove console scope call 1`] = `
"
const c = 10;
console.scope('should be removed');

      ↓ ↓ ↓ ↓ ↓ ↓

const c = 10;
"
`;

exports[`6. Function Declaration > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
function add(a, b) {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

function add(a, b) {
  const c = 10;
  console.log('Custom add function message');
  console.groupCollapsed('(1:0) function add(a, b) {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:13)', 'a:', a);
  console.log('(1:16)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.log('(2:8)', 'c:', c);
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(4:9)', a + b + c);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:9)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(1:0) function add(a, b) {...}');

  return a + b + c;
}
"
`;

exports[`7. Function Expression > const > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = function(a, b) {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = function (a, b) {
  const c = 10;
  console.log('Custom add function message');
  console.groupCollapsed('(1:6) const add = function(a, b) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:21)', 'a:', a);
  console.log('(1:24)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.log('(2:8)', 'c:', c);
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(4:9)', a + b + c);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(1:6) const add = function(a, b) => {...}');

  return a + b + c;
};
"
`;

exports[`8. Function Expression > let > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
let add = function(a, b) {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

let add = function (a, b) {
  const c = 10;
  console.log('Custom add function message');
  console.groupCollapsed('(1:4) let add = function(a, b) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:19)', 'a:', a);
  console.log('(1:22)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.log('(2:8)', 'c:', c);
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(4:9)', a + b + c);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:4)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(1:4) let add = function(a, b) => {...}');

  return a + b + c;
};
"
`;

exports[`9. Arrow Function > const > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = (a, b) => {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = (a, b) => {
  const c = 10;
  console.log('Custom add function message');
  console.groupCollapsed('(1:6) const add = (a, b) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:13)', 'a:', a);
  console.log('(1:16)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.log('(2:8)', 'c:', c);
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(4:9)', a + b + c);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(1:6) const add = (a, b) => {...}');

  return a + b + c;
};
"
`;

exports[`10. Arrow Function > let > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
let add = (a, b) => {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

let add = (a, b) => {
  const c = 10;
  console.log('Custom add function message');
  console.groupCollapsed('(1:4) let add = (a, b) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:11)', 'a:', a);
  console.log('(1:14)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.log('(2:8)', 'c:', c);
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(4:9)', a + b + c);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:4)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(1:4) let add = (a, b) => {...}');

  return a + b + c;
};
"
`;

exports[`11. Curried Arrow Function > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = (a) => (b) => {
  const c = 10;
  console.scope('Custom add function message');
  return a + b + c;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = a => b => {
  const c = 10;
  console.log('Custom add function message');
  console.groupCollapsed('(1:0) const add = (a) => (b) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:13)', 'a:', a);
  console.log('(1:20)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.log('(2:8)', 'c:', c);
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(4:9)', a + b + c);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(1:0) const add = (a) => (b) => {...}');

  return a + b + c;
};
"
`;

exports[`12. Curried Function Declarion > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
function add(a) {
  return (b) => {
    const c = 10;
    console.scope('Custom add function message');
    return a + b + c;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

function add(a) {
  return b => {
    const c = 10;
    console.log('Custom add function message');
    console.groupCollapsed('(1:0) const add = (a) => (b) => {...}');
    console.groupCollapsed('Parameters');
    console.log('(1:13)', 'a:', a);
    console.log('(2:10)', 'b:', b);
    console.groupEnd('Parameters');
    console.groupCollapsed('Variables');
    console.log('(3:10)', 'c:', c);
    console.groupEnd('Variables');
    console.groupCollapsed('Return');
    console.log('(5:11)', a + b + c);
    console.groupEnd('Return');
    console.groupCollapsed('Script');
    console.log('(1:9)', 'add:', add);
    console.groupEnd('Script');
    console.groupEnd('(1:0) const add = (a) => (b) => {...}');

    return a + b + c;
  };
}
"
`;

exports[`13. Curried Function Expression > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = function (a) {
  return function(b) {
    const c = 10;
    console.scope('Custom add function message');
    return a + b + c;
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = function (a) {
  return function (b) {
    const c = 10;
    console.log('Custom add function message');
    console.groupCollapsed('(1:0) const add = (a) => (b) => {...}');
    console.groupCollapsed('Parameters');
    console.log('(1:22)', 'a:', a);
    console.log('(2:18)', 'b:', b);
    console.groupEnd('Parameters');
    console.groupCollapsed('Variables');
    console.log('(3:10)', 'c:', c);
    console.groupEnd('Variables');
    console.groupCollapsed('Return');
    console.log('(5:11)', a + b + c);
    console.groupEnd('Return');
    console.groupCollapsed('Script');
    console.log('(1:6)', 'add:', add);
    console.groupEnd('Script');
    console.groupEnd('(1:0) const add = (a) => (b) => {...}');

    return a + b + c;
  };
};
"
`;

exports[`14. Curried functions > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
const add = function (a) {
  return function(b) {
    return c => {
      const d = 10;
      console.scope('Custom add function message');
      return a + b + c + d;
    }
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = function (a) {
  return function (b) {
    return c => {
      const d = 10;
      console.log('Custom add function message');
      console.groupCollapsed('(1:0) const add = (a) => (b) => (c) => {...}');
      console.groupCollapsed('Parameters');
      console.log('(1:22)', 'a:', a);
      console.log('(2:18)', 'b:', b);
      console.log('(3:11)', 'c:', c);
      console.groupEnd('Parameters');
      console.groupCollapsed('Variables');
      console.log('(4:12)', 'd:', d);
      console.groupEnd('Variables');
      console.groupCollapsed('Return');
      console.log('(6:13)', a + b + c + d);
      console.groupEnd('Return');
      console.groupCollapsed('Script');
      console.log('(1:6)', 'add:', add);
      console.groupEnd('Script');
      console.groupEnd('(1:0) const add = (a) => (b) => (c) => {...}');

      return a + b + c + d;
    };
  };
};
"
`;

exports[`15. Return statement should be void when no return found 1`] = `
"
const add = function (a, b) {
  console.scope('Custom add function message');
  a + b;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const add = function (a, b) {
  console.log('Custom add function message');
  console.groupCollapsed('(1:6) const add = function(a, b) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:22)', 'a:', a);
  console.log('(1:25)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('Void');
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(1:6) const add = function(a, b) => {...}');

  a + b;
};
"
`;

exports[`16. Finds script scope 1`] = `
"
const hello = 'hello';
function divide(a, b) {
  return a / b;
}
function add(a, b) {
  console.scope('Custom add function message');
  return a + b;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const hello = 'hello';
function divide(a, b) {
  return a / b;
}
function add(a, b) {
  console.log('Custom add function message');
  console.groupCollapsed('(5:0) function add(a, b) {...}');
  console.groupCollapsed('Parameters');
  console.log('(5:13)', 'a:', a);
  console.log('(5:16)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(7:9)', a + b);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'hello:', hello);
  console.log('(2:9)', 'divide:', divide);
  console.log('(5:9)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(5:0) function add(a, b) {...}');

  return a + b;
}
"
`;

exports[`17. Export default Function  > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
export default function(state = 0, action) {
  console.scope('Add one reducer');
  return state + 1;
}

      ↓ ↓ ↓ ↓ ↓ ↓

export default function (state = 0, action) {
  console.log('Add one reducer');
  console.groupCollapsed('(1:0) export default function (state, action) {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:24)', 'state:', state);
  console.log('(1:35)', 'action:', action);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(3:9)', state + 1);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.groupEnd('Script');
  console.groupEnd('(1:0) export default function (state, action) {...}');

  return state + 1;
}
"
`;

exports[`18. Export default Curried Function  > scope of: custom message, function signature, params, variable, return value and script 1`] = `
"
export default addOne => (state = 0, action) => {
  console.scope('Add one reducer');
  return addOne(state);
}

      ↓ ↓ ↓ ↓ ↓ ↓

export default (addOne => (state = 0, action) => {
  console.log('Add one reducer');
  console.groupCollapsed('(1:0) export default = (addOne) => (state, action) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:15)', 'addOne:', addOne);
  console.log('(1:26)', 'state:', state);
  console.log('(1:37)', 'action:', action);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(3:9)', addOne(state));
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.groupEnd('Script');
  console.groupEnd('(1:0) export default = (addOne) => (state, action) => {...}');

  return addOne(state);
});
"
`;

exports[`19. Spread arguments 1`] = `
"
const sum = (...xs) => {
  console.scope('Sum args');
  return xs.reduce((acc, x) => acc + x, 0);
}

      ↓ ↓ ↓ ↓ ↓ ↓

const sum = (...xs) => {
  console.log('Sum args');
  console.groupCollapsed('(1:6) const sum = (xs) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:16)', 'xs:', xs);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(3:9)', xs.reduce((acc, x) => acc + x, 0));
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'sum:', sum);
  console.groupEnd('Script');
  console.groupEnd('(1:6) const sum = (xs) => {...}');

  return xs.reduce((acc, x) => acc + x, 0);
};
"
`;

exports[`20. Multiple console scopes 1`] = `
"
const sum = (...xs) => {
  console.scope('Sum args');
  return xs.reduce((acc, x) => acc + x, 0);
}

const add = (a, b) => {
  console.scope('Adding stuff up');
  return a + b;
}

      ↓ ↓ ↓ ↓ ↓ ↓

const sum = (...xs) => {
  console.log('Sum args');
  console.groupCollapsed('(1:6) const sum = (xs) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:16)', 'xs:', xs);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(3:9)', xs.reduce((acc, x) => acc + x, 0));
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'sum:', sum);
  console.log('(6:6)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(1:6) const sum = (xs) => {...}');

  return xs.reduce((acc, x) => acc + x, 0);
};

const add = (a, b) => {
  console.log('Adding stuff up');
  console.groupCollapsed('(6:6) const add = (a, b) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(6:13)', 'a:', a);
  console.log('(6:16)', 'b:', b);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(8:9)', a + b);
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'sum:', sum);
  console.log('(6:6)', 'add:', add);
  console.groupEnd('Script');
  console.groupEnd('(6:6) const add = (a, b) => {...}');

  return a + b;
};
"
`;

exports[`21. Async functions 1`] = `
"
const getApi = async (url) => {
  console.scope('Requesting some data');
  return await fetch(url);
}

      ↓ ↓ ↓ ↓ ↓ ↓

const getApi = async url => {
  console.log('Requesting some data');
  console.groupCollapsed('(1:6) const getApi = (url) => {...}');
  console.groupCollapsed('Parameters');
  console.log('(1:22)', 'url:', url);
  console.groupEnd('Parameters');
  console.groupCollapsed('Variables');
  console.groupEnd('Variables');
  console.groupCollapsed('Return');
  console.log('(3:9)', (await fetch(url)));
  console.groupEnd('Return');
  console.groupCollapsed('Script');
  console.log('(1:6)', 'getApi:', getApi);
  console.groupEnd('Script');
  console.groupEnd('(1:6) const getApi = (url) => {...}');

  return await fetch(url);
};
"
`;
